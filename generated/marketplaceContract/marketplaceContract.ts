// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class marketplaceContract__getBetNFTResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get matchKey(): BigInt {
    return this[1].toBigInt();
  }

  get mintValue(): BigInt {
    return this[2].toBigInt();
  }

  get faceValue(): BigInt {
    return this[3].toBigInt();
  }

  get ticker(): Bytes {
    return this[4].toBytes();
  }

  get rewardPhase(): i32 {
    return this[5].toI32();
  }

  get minter(): Address {
    return this[6].toAddress();
  }

  get bookmaker(): Address {
    return this[7].toAddress();
  }

  get tokenURI(): string {
    return this[8].toString();
  }

  get assertKey(): string {
    return this[9].toString();
  }

  get version(): i32 {
    return this[10].toI32();
  }
}

export class marketplaceContract__getBetNFTResultValue1Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get ticker(): Bytes {
    return this[2].toBytes();
  }

  get owner(): Address {
    return this[3].toAddress();
  }

  get seller(): Address {
    return this[4].toAddress();
  }

  get expires(): BigInt {
    return this[5].toBigInt();
  }

  get itemStatus(): i32 {
    return this[6].toI32();
  }

  get actionType(): i32 {
    return this[7].toI32();
  }
}

export class marketplaceContract__getBetNFTResult {
  value0: marketplaceContract__getBetNFTResultValue0Struct;
  value1: marketplaceContract__getBetNFTResultValue1Struct;

  constructor(
    value0: marketplaceContract__getBetNFTResultValue0Struct,
    value1: marketplaceContract__getBetNFTResultValue1Struct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getValue0(): marketplaceContract__getBetNFTResultValue0Struct {
    return this.value0;
  }

  getValue1(): marketplaceContract__getBetNFTResultValue1Struct {
    return this.value1;
  }
}

export class marketplaceContract__getFixedBettingRewardResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class marketplaceContract__getFixedBettingReward1Result {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class marketplaceContract__validateMatchNoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSportType(): BigInt {
    return this.value0;
  }

  getMatchId(): BigInt {
    return this.value1;
  }
}

export class marketplaceContract extends ethereum.SmartContract {
  static bind(address: Address): marketplaceContract {
    return new marketplaceContract("marketplaceContract", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  calculateReward(tokenId: BigInt): boolean {
    let result = super.call(
      "calculateReward",
      "calculateReward(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBoolean();
  }

  try_calculateReward(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "calculateReward",
      "calculateReward(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  clearingBetNFT(tokenId: BigInt, matchKey: BigInt): boolean {
    let result = super.call(
      "clearingBetNFT",
      "clearingBetNFT(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(matchKey)
      ]
    );

    return result[0].toBoolean();
  }

  try_clearingBetNFT(
    tokenId: BigInt,
    matchKey: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "clearingBetNFT",
      "clearingBetNFT(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(matchKey)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBetNFT(tokenId: BigInt): marketplaceContract__getBetNFTResult {
    let result = super.call(
      "getBetNFT",
      "getBetNFT(uint256):((uint256,uint256,uint256,uint256,bytes32,uint8,address,address,string,string,uint8),(uint256,uint256,bytes32,address,address,uint256,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<marketplaceContract__getBetNFTResult>(
      new marketplaceContract__getBetNFTResult(
        changetype<marketplaceContract__getBetNFTResultValue0Struct>(
          result[0].toTuple()
        ),
        changetype<marketplaceContract__getBetNFTResultValue1Struct>(
          result[1].toTuple()
        )
      )
    );
  }

  try_getBetNFT(
    tokenId: BigInt
  ): ethereum.CallResult<marketplaceContract__getBetNFTResult> {
    let result = super.tryCall(
      "getBetNFT",
      "getBetNFT(uint256):((uint256,uint256,uint256,uint256,bytes32,uint8,address,address,string,string,uint8),(uint256,uint256,bytes32,address,address,uint256,uint8,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<marketplaceContract__getBetNFTResult>(
        new marketplaceContract__getBetNFTResult(
          changetype<marketplaceContract__getBetNFTResultValue0Struct>(
            value[0].toTuple()
          ),
          changetype<marketplaceContract__getBetNFTResultValue1Struct>(
            value[1].toTuple()
          )
        )
      )
    );
  }

  getFixedBettingReward(
    matchResult: Array<BigInt>,
    strAssertKey: string,
    assertFuc: Array<string>
  ): marketplaceContract__getFixedBettingRewardResult {
    let result = super.call(
      "getFixedBettingReward",
      "getFixedBettingReward(int256[],string,string[]):(bool,uint256)",
      [
        ethereum.Value.fromSignedBigIntArray(matchResult),
        ethereum.Value.fromString(strAssertKey),
        ethereum.Value.fromStringArray(assertFuc)
      ]
    );

    return new marketplaceContract__getFixedBettingRewardResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getFixedBettingReward(
    matchResult: Array<BigInt>,
    strAssertKey: string,
    assertFuc: Array<string>
  ): ethereum.CallResult<marketplaceContract__getFixedBettingRewardResult> {
    let result = super.tryCall(
      "getFixedBettingReward",
      "getFixedBettingReward(int256[],string,string[]):(bool,uint256)",
      [
        ethereum.Value.fromSignedBigIntArray(matchResult),
        ethereum.Value.fromString(strAssertKey),
        ethereum.Value.fromStringArray(assertFuc)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new marketplaceContract__getFixedBettingRewardResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getFixedBettingReward1(
    matchResult: Array<BigInt>,
    oAssertKey: Array<BigInt>,
    assertFuc: Array<Bytes>
  ): marketplaceContract__getFixedBettingReward1Result {
    let result = super.call(
      "getFixedBettingReward",
      "getFixedBettingReward(int256[],uint256[],bytes[]):(bool,uint256)",
      [
        ethereum.Value.fromSignedBigIntArray(matchResult),
        ethereum.Value.fromUnsignedBigIntArray(oAssertKey),
        ethereum.Value.fromBytesArray(assertFuc)
      ]
    );

    return new marketplaceContract__getFixedBettingReward1Result(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getFixedBettingReward1(
    matchResult: Array<BigInt>,
    oAssertKey: Array<BigInt>,
    assertFuc: Array<Bytes>
  ): ethereum.CallResult<marketplaceContract__getFixedBettingReward1Result> {
    let result = super.tryCall(
      "getFixedBettingReward",
      "getFixedBettingReward(int256[],uint256[],bytes[]):(bool,uint256)",
      [
        ethereum.Value.fromSignedBigIntArray(matchResult),
        ethereum.Value.fromUnsignedBigIntArray(oAssertKey),
        ethereum.Value.fromBytesArray(assertFuc)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new marketplaceContract__getFixedBettingReward1Result(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getMatchResult(matchNo: BigInt): Array<BigInt> {
    let result = super.call(
      "getMatchResult",
      "getMatchResult(uint256):(int256[])",
      [ethereum.Value.fromUnsignedBigInt(matchNo)]
    );

    return result[0].toBigIntArray();
  }

  try_getMatchResult(matchNo: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getMatchResult",
      "getMatchResult(uint256):(int256[])",
      [ethereum.Value.fromUnsignedBigInt(matchNo)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRule(assertIdx: BigInt): Array<string> {
    let result = super.call("getRule", "getRule(uint256):(string[])", [
      ethereum.Value.fromUnsignedBigInt(assertIdx)
    ]);

    return result[0].toStringArray();
  }

  try_getRule(assertIdx: BigInt): ethereum.CallResult<Array<string>> {
    let result = super.tryCall("getRule", "getRule(uint256):(string[])", [
      ethereum.Value.fromUnsignedBigInt(assertIdx)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  listBetNFT(tokenId: BigInt, price: BigInt, expires: BigInt): boolean {
    let result = super.call(
      "listBetNFT",
      "listBetNFT(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(expires)
      ]
    );

    return result[0].toBoolean();
  }

  try_listBetNFT(
    tokenId: BigInt,
    price: BigInt,
    expires: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "listBetNFT",
      "listBetNFT(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(expires)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requestMatchResult(matchNo: BigInt): boolean {
    let result = super.call(
      "requestMatchResult",
      "requestMatchResult(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(matchNo)]
    );

    return result[0].toBoolean();
  }

  try_requestMatchResult(matchNo: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "requestMatchResult",
      "requestMatchResult(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(matchNo)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tradeBetNFT(tokenId: BigInt): boolean {
    let result = super.call("tradeBetNFT", "tradeBetNFT(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_tradeBetNFT(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("tradeBetNFT", "tradeBetNFT(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unlistBetNFT(tokenId: BigInt): boolean {
    let result = super.call("unlistBetNFT", "unlistBetNFT(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_unlistBetNFT(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("unlistBetNFT", "unlistBetNFT(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validateMatchNo(matchNo: BigInt): marketplaceContract__validateMatchNoResult {
    let result = super.call(
      "validateMatchNo",
      "validateMatchNo(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(matchNo)]
    );

    return new marketplaceContract__validateMatchNoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_validateMatchNo(
    matchNo: BigInt
  ): ethereum.CallResult<marketplaceContract__validateMatchNoResult> {
    let result = super.tryCall(
      "validateMatchNo",
      "validateMatchNo(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(matchNo)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new marketplaceContract__validateMatchNoResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddBookmakerCall extends ethereum.Call {
  get inputs(): AddBookmakerCall__Inputs {
    return new AddBookmakerCall__Inputs(this);
  }

  get outputs(): AddBookmakerCall__Outputs {
    return new AddBookmakerCall__Outputs(this);
  }
}

export class AddBookmakerCall__Inputs {
  _call: AddBookmakerCall;

  constructor(call: AddBookmakerCall) {
    this._call = call;
  }

  get bookmakerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddBookmakerCall__Outputs {
  _call: AddBookmakerCall;

  constructor(call: AddBookmakerCall) {
    this._call = call;
  }
}

export class CalculateRewardCall extends ethereum.Call {
  get inputs(): CalculateRewardCall__Inputs {
    return new CalculateRewardCall__Inputs(this);
  }

  get outputs(): CalculateRewardCall__Outputs {
    return new CalculateRewardCall__Outputs(this);
  }
}

export class CalculateRewardCall__Inputs {
  _call: CalculateRewardCall;

  constructor(call: CalculateRewardCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CalculateRewardCall__Outputs {
  _call: CalculateRewardCall;

  constructor(call: CalculateRewardCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClearingBetNFTCall extends ethereum.Call {
  get inputs(): ClearingBetNFTCall__Inputs {
    return new ClearingBetNFTCall__Inputs(this);
  }

  get outputs(): ClearingBetNFTCall__Outputs {
    return new ClearingBetNFTCall__Outputs(this);
  }
}

export class ClearingBetNFTCall__Inputs {
  _call: ClearingBetNFTCall;

  constructor(call: ClearingBetNFTCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get matchKey(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClearingBetNFTCall__Outputs {
  _call: ClearingBetNFTCall;

  constructor(call: ClearingBetNFTCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreateBetNFTCall extends ethereum.Call {
  get inputs(): CreateBetNFTCall__Inputs {
    return new CreateBetNFTCall__Inputs(this);
  }

  get outputs(): CreateBetNFTCall__Outputs {
    return new CreateBetNFTCall__Outputs(this);
  }
}

export class CreateBetNFTCall__Inputs {
  _call: CreateBetNFTCall;

  constructor(call: CreateBetNFTCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get matchKey(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get ticker(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get price(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get faceValue(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get punter(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get tokenURI(): string {
    return this._call.inputValues[6].value.toString();
  }

  get assertKey(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class CreateBetNFTCall__Outputs {
  _call: CreateBetNFTCall;

  constructor(call: CreateBetNFTCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class ListBetNFTCall extends ethereum.Call {
  get inputs(): ListBetNFTCall__Inputs {
    return new ListBetNFTCall__Inputs(this);
  }

  get outputs(): ListBetNFTCall__Outputs {
    return new ListBetNFTCall__Outputs(this);
  }
}

export class ListBetNFTCall__Inputs {
  _call: ListBetNFTCall;

  constructor(call: ListBetNFTCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expires(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListBetNFTCall__Outputs {
  _call: ListBetNFTCall;

  constructor(call: ListBetNFTCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RequestMatchResultCall extends ethereum.Call {
  get inputs(): RequestMatchResultCall__Inputs {
    return new RequestMatchResultCall__Inputs(this);
  }

  get outputs(): RequestMatchResultCall__Outputs {
    return new RequestMatchResultCall__Outputs(this);
  }
}

export class RequestMatchResultCall__Inputs {
  _call: RequestMatchResultCall;

  constructor(call: RequestMatchResultCall) {
    this._call = call;
  }

  get matchNo(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestMatchResultCall__Outputs {
  _call: RequestMatchResultCall;

  constructor(call: RequestMatchResultCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetupLaunchpadCall extends ethereum.Call {
  get inputs(): SetupLaunchpadCall__Inputs {
    return new SetupLaunchpadCall__Inputs(this);
  }

  get outputs(): SetupLaunchpadCall__Outputs {
    return new SetupLaunchpadCall__Outputs(this);
  }
}

export class SetupLaunchpadCall__Inputs {
  _call: SetupLaunchpadCall;

  constructor(call: SetupLaunchpadCall) {
    this._call = call;
  }

  get betNFT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get jackpot(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetupLaunchpadCall__Outputs {
  _call: SetupLaunchpadCall;

  constructor(call: SetupLaunchpadCall) {
    this._call = call;
  }
}

export class SetupOracleConsumerCall extends ethereum.Call {
  get inputs(): SetupOracleConsumerCall__Inputs {
    return new SetupOracleConsumerCall__Inputs(this);
  }

  get outputs(): SetupOracleConsumerCall__Outputs {
    return new SetupOracleConsumerCall__Outputs(this);
  }
}

export class SetupOracleConsumerCall__Inputs {
  _call: SetupOracleConsumerCall;

  constructor(call: SetupOracleConsumerCall) {
    this._call = call;
  }

  get oracleConsumer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetupOracleConsumerCall__Outputs {
  _call: SetupOracleConsumerCall;

  constructor(call: SetupOracleConsumerCall) {
    this._call = call;
  }
}

export class TradeBetNFTCall extends ethereum.Call {
  get inputs(): TradeBetNFTCall__Inputs {
    return new TradeBetNFTCall__Inputs(this);
  }

  get outputs(): TradeBetNFTCall__Outputs {
    return new TradeBetNFTCall__Outputs(this);
  }
}

export class TradeBetNFTCall__Inputs {
  _call: TradeBetNFTCall;

  constructor(call: TradeBetNFTCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TradeBetNFTCall__Outputs {
  _call: TradeBetNFTCall;

  constructor(call: TradeBetNFTCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnlistBetNFTCall extends ethereum.Call {
  get inputs(): UnlistBetNFTCall__Inputs {
    return new UnlistBetNFTCall__Inputs(this);
  }

  get outputs(): UnlistBetNFTCall__Outputs {
    return new UnlistBetNFTCall__Outputs(this);
  }
}

export class UnlistBetNFTCall__Inputs {
  _call: UnlistBetNFTCall;

  constructor(call: UnlistBetNFTCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlistBetNFTCall__Outputs {
  _call: UnlistBetNFTCall;

  constructor(call: UnlistBetNFTCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
